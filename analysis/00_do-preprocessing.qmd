---
title: "00_do-preprocessing"
format: html
editor: visual
---

## Preprocess eyegaze and Handcoded Data

This script takes in the raw eyetracking data from the tobii-research package and saves the preprocessed data. This preprocessing step assigns AOIs, normalizes timebins, and provides interpolated datapoints so that the eyegaze dataset is consistent with the hand-coded datasets generated by peyegaze (v3). This will allow us to compare eyetracking data to handcoded data and recover any data from children for whom the eyetracking quality was poor.

There are 4 major preprocessing steps:

1)  Reading in the raw data

2)  Assigning AOIs

3)  Normalizing timepoints to 33ms timebins

4)  Interpolating gaps between non-shift, known looks.

The script then reads in any available handcoded data, joins the data by subject ID, and saves in a designated folder in the directory (typically a `preprocessedData/` folder)

## Setup

```{r}
library(here)
library(tidyverse)

source(here("analysis/functions/preprocessGazeData.R"))
source(here("analysis/functions/Pygaze_InterpolateAOIHits.R"))

eyetracking_data_path <- here("experiments/BounCES_v1/eyetrackingData")
handcoding_data_path <- here("analysis/preprocessedData/handcodedData")

write_file_location <- here("analysis/preprocessedData/eyetrackingData/pilot_v2")

subj_data <- here("analysis/preprocessedData/subjData/subject_data.xlsx")
```

# Eyetracking Data

```{r}

#Grab file names for all eyetracking data
fullGazeDataNames <- list.files(path = eyetracking_data_path, pattern = ".tsv",
                      full.names = TRUE, recursive = TRUE)

gazeDataNames_pilot <- fullGazeDataNames[grepl("pilot_v2", fullGazeDataNames)]
#gazeDataNames_prac <- fullGazeDataNames[grepl("prac", fullGazeDataNames)]

d_full_raw <- do.call(dplyr::bind_rows, lapply(gazeDataNames_pilot, integrateEventData))
```

## Check Gaze Quality

```{r}
screen_x_max = 1920
screen_y_max = 1080

d_full_xy <- d_full_raw |> 
  processGazeData(monitor_x = screen_x_max, monitor_y = screen_y_max)

d_full_xy |> 
  filter(GazePointX != -1, GazePointY != -1) |> 
  ggplot(aes(x = GazePointX, y = GazePointY, color = as.factor(subjCode))) +
  geom_point(alpha = .25) + 
  facet_wrap(~trialType) + 
  theme_minimal()
```

## Assign Numeric IDs

We're grouping by subject and subject information, so split off that information to be joined later.

```{r}
d_subjects <- d_full_xy |> 
  select(Experiment, participant_group, subjCode)

d_full_xy <- d_full_xy |> 
  select(subjCode, everything(), -c(Experiment, participant_group))
```

### Split Data into Experiment Phases

We have to assign AOIs differently for each phase because they have different AOI regions. This also means I can't do the AOI based downsampling for the entire experiment.

```{r}
d_active_train_gaze <- d_full_xy |> 
  filter(trialType == "activeTraining") |> 
  janitor::remove_empty("cols")
  
d_training_gaze <- d_full_xy |> 
  filter(trialType == "training") |> 
  janitor::remove_empty("cols")

d_active_test_gaze <- d_full_xy |> 
  filter(trialType == "activeTest") |> 
  janitor::remove_empty("cols")

d_lwl_test_gaze <- d_full_xy |> 
  filter(trialType == "test") |> 
  janitor::remove_empty("cols")
```

#### Split Off Trial Information

We're also summarizing across a lot of trial data, so, for each phase, create a dataframe that contains the unique combinations of all the trial information. This will be left-joinable.

Active Training:

```         
trial_type_id    leftImage rightImage  leftAudio rightAudio trialType trialID
```

##### Active Training

```{r}
d_active_train_trials <- d_active_train_gaze |> 
  select(trial_number:rightAudio) |> 
  unique() |> 
  mutate(trial_type_id = seq(1:n()))

d_active_train_gaze <- d_active_train_gaze |> 
  left_join(d_active_train_trials) |> 
  select(-c(trial_number:rightAudio))
```

##### Active test

d_active_training_trials columns:

```         
trialtype_id  leftImage rightImage  leftAudio rightAudio  novelImage  leftLabel rightLabel
```

```{r}
d_active_test_trials <- d_active_test_gaze |> 
  select(trial_number:rightAudio) |> 
  unique() |> 
  mutate(trial_type_id = seq(1:n()))

d_active_test_gaze <- 
  d_active_test_gaze |> 
  left_join(d_active_test_trials) |> 
  select(-c(trial_number:rightAudio))
```

##### Passive Training

Training:

```         
trial_type_id  speakerPos  leftImage rightImage  speakerType speakerExp  label video
```

```{r}
d_passive_training_trials <- d_training_gaze |> 
  select(trial_number:trialDuration) |> 
  unique() |> 
  mutate(trial_type_id = seq(1:n()))

d_training_gaze <- d_training_gaze |> 
  left_join(d_passive_training_trials) |> 
  select(-c(trial_number:trialDuration))
```

```{r}
d_lwl_trials <- d_lwl_test_gaze |> select(trial_number:trialAudioDuration) |> 
  unique() |> 
  mutate(trial_type_id = seq(1:n()))

d_lwl_gaze <- d_lwl_test_gaze |> 
  left_join(d_lwl_trials) |> 
  select(-c(trial_number:trialAudioDuration))
```

## Assign AOIs

##### Passive Training AOIs

```{r}
stim_width = c(-250, 250)
stim_height = c(-250, 250)
left_stim_coords = c(480, 600)
right_stim_coords = c(1440, 600)

left_stim_aoi = list(left_stim_coords[[1]] + stim_width, 
                    left_stim_coords[[2]] + stim_height)
right_stim_aoi = list(right_stim_coords[[1]] + stim_width, 
                    right_stim_coords[[2]] + stim_height)

```

Quick plot to check AOI reasonablility:

```{r}
d_training_gaze |> 
  ggplot(aes(x = GazePointXMean, y = GazePointYMean, color = as.factor(subjCode))) +
  geom_point(alpha = .05) +
annotate("rect", xmin = 0, xmax = screen_x_max, ymin = 0, ymax = screen_y_max, 
                   fill=NA, color="black", size=0.5) +
  annotate("rect", xmin=left_stim_aoi[[1]][[1]], xmax=left_stim_aoi[[1]][[2]], 
                ymin=left_stim_aoi[[2]][[1]], ymax=left_stim_aoi[[2]][[2]], 
            color = "black", size = .5, fill = NA) +
  annotate("rect", xmin=right_stim_aoi[[1]][[1]], xmax=right_stim_aoi[[1]][[2]], 
                ymin=right_stim_aoi[[2]][[1]], ymax=right_stim_aoi[[2]][[2]], 
            color = "black",fill=NA) +
  theme_classic() + 
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  facet_wrap(~subjCode)
```

```{r}
d_training_aoi <- d_training_gaze |> 
  mutate(LookAOI = NA) |> 
  assignAOI(left_stim_aoi, "left") |> 
  assignAOI(right_stim_aoi, "right") |> 
  mutate(LookAOI = case_when(LookAOI == "to_fill" & isLook==1 ~ "off",
                         LookAOI != "to_fill" ~ LookAOI, 
                         TRUE ~ NA))|> 
  select(-c(GazePointXLeft:TimeStamp_num))
```

##### Active Training

```{r}
d_active_train_gaze |> 
  ggplot(aes(x = GazePointXMean, y = GazePointYMean, color = as.factor(subjCode))) +
  geom_point(alpha = .05) +
annotate("rect", xmin = 0, xmax = screen_x_max, ymin = 0, ymax = screen_y_max, 
                   fill=NA, color="black", size=0.5) +
  annotate("rect", xmin=left_stim_aoi[[1]][[1]], xmax=left_stim_aoi[[1]][[2]], 
                ymin=left_stim_aoi[[2]][[1]], ymax=left_stim_aoi[[2]][[2]], 
            color = "black", size = .5, fill = NA) +
  annotate("rect", xmin=right_stim_aoi[[1]][[1]], xmax=right_stim_aoi[[1]][[2]], 
                ymin=right_stim_aoi[[2]][[1]], ymax=right_stim_aoi[[2]][[2]], 
            color = "black",fill=NA) +
  theme_classic() + 
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  facet_wrap(~subjCode)
```

Assign AOIS

```{r}
d_active_train_aoi <- d_active_train_gaze |> 
  mutate(LookAOI = NA) |> 
  assignAOI(left_stim_aoi, "left") |> 
  assignAOI(right_stim_aoi, "right") |> 
  mutate(LookAOI = case_when(LookAOI == "to_fill" & isLook==1 ~ "off",
                         LookAOI != "to_fill" ~ LookAOI, 
                         TRUE ~ NA))|> 
  select(-c(GazePointXLeft:TimeStamp_num))
```

##### Active Test

```{r}
d_active_test_gaze |> 
  ggplot(aes(x = GazePointXMean, y = GazePointYMean, color = as.factor(subjCode))) +
  geom_point(alpha = .05) +
annotate("rect", xmin = 0, xmax = screen_x_max, ymin = 0, ymax = screen_y_max, 
                   fill=NA, color="black", size=0.5) +
  annotate("rect", xmin=left_stim_aoi[[1]][[1]], xmax=left_stim_aoi[[1]][[2]], 
                ymin=left_stim_aoi[[2]][[1]], ymax=left_stim_aoi[[2]][[2]], 
            color = "black", size = .5, fill = NA) +
  annotate("rect", xmin=right_stim_aoi[[1]][[1]], xmax=right_stim_aoi[[1]][[2]], 
                ymin=right_stim_aoi[[2]][[1]], ymax=right_stim_aoi[[2]][[2]], 
            color = "black",fill=NA) +
  theme_classic() + 
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  facet_wrap(~subjCode)
```

```{r}
d_active_test_aoi <- d_active_test_gaze |> 
  mutate(LookAOI = NA) |> 
  assignAOI(left_stim_aoi, "left") |> 
  assignAOI(right_stim_aoi, "right") |> 
  mutate(LookAOI = case_when(LookAOI == "to_fill" & isLook==1 ~ "off",
                         LookAOI != "to_fill" ~ LookAOI, 
                         TRUE ~ NA))|> 
  select(-c(GazePointXLeft:TimeStamp_num))

```

##### LWL Test

AOIS

```{r}
#TODO
```

Check Validity

```{r}
d_lwl_gaze |> 
  ggplot(aes(x = GazePointXMean, y = GazePointYMean, color = as.factor(subjCode))) +
  geom_point(alpha = .05) +
annotate("rect", xmin = 0, xmax = screen_x_max, ymin = 0, ymax = screen_y_max, 
                   fill=NA, color="black", size=0.5) +
  annotate("rect", xmin=left_stim_aoi[[1]][[1]], xmax=left_stim_aoi[[1]][[2]], 
                ymin=left_stim_aoi[[2]][[1]], ymax=left_stim_aoi[[2]][[2]], 
            color = "black", size = .5, fill = NA) +
  annotate("rect", xmin=right_stim_aoi[[1]][[1]], xmax=right_stim_aoi[[1]][[2]], 
                ymin=right_stim_aoi[[2]][[1]], ymax=right_stim_aoi[[2]][[2]], 
            color = "black",fill=NA) +
  theme_classic() + 
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  facet_wrap(~subjCode)
```

Assign AOIs

```{r}
d_lwl_aoi <- d_lwl_gaze |> 
  mutate(LookAOI = NA) |> 
  assignAOI(left_stim_aoi, "left") |> 
  assignAOI(right_stim_aoi, "right") |> 
  mutate(LookAOI = case_when(LookAOI == "to_fill" & isLook==1 ~ "off",
                         LookAOI != "to_fill" ~ LookAOI, 
                         TRUE ~ NA))|> 
  select(-c(GazePointXLeft:TimeStamp_num))
```

## Preprocess Active Test

### Regularize TimeBins

```{r}
d_active_test_aoi_binned <- d_active_test_aoi |>  
  normalizeTimeMS() |> 
  group_by(subjCode, trial_type_id) |> 
  group_modify(~rezeroTrials(.x)) |> 
  group_modify((~createTimeBins(.x, ms_per_frame=1000/60)))

# Save messaging by timepoint

d_active_test_event_timepoints <- d_active_test_aoi_binned |> 
  filter(Event != "" & !is.na(Event)) |> 
  group_by(subjCode, trial_type_id, TimeBin, TimeBinMs) |> 
  summarize(Events = paste0(sort(unique(Event)), collapse = "_"))
```

### Interpolate Gaps

```{r}
d_final_active_test_aoi <- 
  d_active_test_aoi_binned |> 
  group_by(subjCode, trial_type_id, TimeBin, TimeBinMs, Event) |> 
  slice_head(n = 1) %>% 
  InterpolateMissingAOI() %>% 
  ungroup() %>% 
  left_join(d_active_test_trials)
```

```{r}
d_final_active_test_aoi %>% 
  mutate(AOICond = case_when(LookAOI == "left" ~ leftStimType,
                             LookAOI == "right" ~ rightStimType,
                             TRUE ~ LookAOI)) %>% 
  ggplot(aes(x = TimeBinMs, y = AOICond, color = AOICond)) +
  geom_point(alpha = .05) + 
  geom_vline(xintercept=0) + 
  facet_grid(cols = vars(trialID),
             rows = vars(subjCode)) + 
  theme_minimal() + 
  theme(strip.text.y = element_text(angle = 0))  + 
  scale_color_manual(values = c("boundary"="#3a86ff",
                                "prototype"="#ff006e"))
```

### Save Data

```{r}
d_final_active_test_aoi %>% write_csv(file = here(write_file_location, "full_active_test_aois.csv"))
```

## Preprocess LWL

```{r}
d_lwl_aoi_binned <- d_lwl_aoi |>  
  normalizeTimeMS() |> 
  group_by(subjCode, trial_type_id) |> 
  group_modify(~rezeroTrials(.x, eventname = "audioOnset")) |> 
  group_modify((~createTimeBins(.x, ms_per_frame=1000/60)))

# Save messaging by timepoint

d_lwl_event_timepoints <- d_lwl_aoi_binned |> 
  filter(Event != "" & !is.na(Event)) |> 
  group_by(subjCode, trial_type_id, TimeBin, TimeBinMs) |> 
  summarize(Events = paste0(sort(unique(Event)), collapse = "_"))
```

```{r}
d_final_lwl_aoi <- 
  d_lwl_aoi_binned |> 
  group_by(subjCode, trial_type_id, TimeBin, TimeBinMs, Event) |> 
  slice_head(n = 1) %>% 
  InterpolateMissingAOI() %>% 
  ungroup() %>% 
  left_join(d_lwl_trials)
```

```{r}
d_final_lwl_aoi %>% 
  mutate(AOICond = case_when((LookAOI == "left" & TargetObjectPos == "bottomLeft") ~ "target",
                             (LookAOI == "right" & TargetObjectPos == "bottomRight") ~ "target",
                             (LookAOI == "left" & DistracterObjectPos == "bottomLeft") ~ "distractor",
                             (LookAOI == "right" & DistracterObjectPos == "bottomRight") ~ "distractor",
                             TRUE ~ LookAOI)) %>% 
  ggplot(aes(x = TimeBinMs, y = AOICond, color = AOICond)) +
  geom_point(alpha = .05) + 
  geom_vline(xintercept=0) + 
  facet_grid(cols = vars(trialID),
             rows = vars(subjCode)) + 
  theme_minimal() + 
  theme(strip.text.y = element_text(angle = 0))
```

```{r}
d_final_lwl_aoi %>% write_csv(file = here(write_file_location, "full_lwl_aois.csv"))
```
